// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique

  username      String?
  name          String
  image         String?
  emailVerified DateTime?
  hashPassword  String?

  problems         Problem[]
  comments         Comment[]
  problemsResolved ProblemsResolved[]

  reply    Reply[]
  accounts Account[]
}

// Modelo de datos para los problemas (publicaciones)
model Problem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    Status   @default(open)
  likes     Int      @default(0)
  dislikes  Int      @default(0)
  views     Int      @default(0)

  title       String
  description String
  code        String? @db.VarChar(10000)

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  ProblemsResolved ProblemsResolved[]

  comments Comment[]
  tags     TagsOnProblem[]

  @@index([userId])
}

// Modelo de datos para los comentarios a los problemas
model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  anonymous Boolean  @default(false)
  likes     Int      @default(0)
  dislikes  Int      @default(0)

  content String

  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
  problem   Problem @relation(fields: [problemId], references: [id])
  problemId String

  reply Reply[]

  @@index([authorId])
  @@index([problemId])
}

model Tag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  problems TagsOnProblem[]
}

// Enumeraci√≥n para el estado del problema
enum Status {
  open
  closed
  solved
  unsolved
}

model ProblemsResolved {
  id         String   @id @default(uuid())
  resolvedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  problem    Problem  @relation(fields: [problemId], references: [id])
  problemId  String
  resolver   User     @relation(fields: [resolverId], references: [id])
  resolverId String

  @@index([problemId])
  @@index([resolverId])
}

model Reply {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())

  userReply   User   @relation(fields: [userIdReply], references: [id])
  userIdReply String

  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@index([commentId])
  @@index([userIdReply])
}

model TagsOnProblem {
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId String

  asignedAt DateTime @default(now())

  tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId String

  @@id([problemId, tagId])
  @@index([tagId])
}
